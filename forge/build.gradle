import org.apache.tools.ant.filters.ReplaceTokens
import org.mtr.mod.BuildTools

plugins {
    id "net.minecraftforge.gradle" version "6.+"
    id "org.spongepowered.mixin" version "+"
    id 'systems.manifold.manifold-gradle-plugin' version '+'
}


final BuildTools buildTools = new BuildTools(minecraftVersion, "forge", project)

minecraft {
    mappings channel: "official", version: minecraftVersion
    runs {
        configureEach {
            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"
        }
        client {}
        server { args "--nogui" }
    }
}


sourceSets.main.resources { srcDir "src/generated/resources" }

dependencies {
    implementation 'systems.manifold:manifold:+'
    minecraft "net.minecraftforge:forge:${minecraftVersion}-${buildTools.getForgeVersion()}"
    annotationProcessor "org.spongepowered:mixin:+:processor"
    annotationProcessor 'systems.manifold:manifold-preprocessor:+'
    implementation fg.deobf("org.mtr:MTR-forge:${mtrVersion}+${minecraftVersion}-server")
}

mixin {
    add sourceSets.main, "mtr.refmap.json"
    config "mtr.mixins.json"
    debug.verbose = true
    debug.export = true
}

java {
    toolchain {
        println("Using Java " + JavaLanguageVersion.of(buildTools.javaLanguageVersion))
        languageVersion.set(JavaLanguageVersion.of(buildTools.javaLanguageVersion))
    }
    withSourcesJar()
    //withJavadocJar()
}


tasks.withType(JavaCompile).configureEach {
    doLast {
        configurations.runtimeClasspath.resolve()
        configurations.compileClasspath.resolve()
        configurations.annotationProcessor.resolve()
    }

    options.encoding = 'UTF-8'
    options.fork = true

    options.compilerArgs += [
            '-Xplugin:Manifold',
            '-AMC_VERSION=' + buildTools.getMCVersionNumber()
    ]
}


tasks.register("setupFiles") {
    copy {
        outputs.upToDateWhen { false }
        from "src/main/mods.template.toml"
        into "src/main/resources/META-INF"
        filter(ReplaceTokens, tokens: [
                "minecraft": project.findProperty("minecraftVersion") ?: minecraftVersion,
                "version"  : version
        ])
        rename "(.+).template.toml", "\$1.toml"
    }

    delete fileTree("src/main/java/top/xfunny/mod")
    delete fileTree("src/main/java/top/xfunny/mixin")
    delete fileTree("src/main/resources/assets")
    delete fileTree("src/main/resources/data")
    delete fileTree("src/main/resources/yte.mixins.json")

    copy {
        outputs.upToDateWhen { false }
        from "../fabric/src/main/java/top/xfunny/mod"
        into "src/main/java/top/xfunny/mod"
    }

    copy {
        outputs.upToDateWhen { false }
        from "../fabric/src/main/java/top/xfunny/mixin"
        into "src/main/java/top/xfunny/mixin"
    }

    copy {
        outputs.upToDateWhen { false }
        from "../fabric/src/main/resources/assets"
        into "src/main/resources/assets"
    }

    copy {
        outputs.upToDateWhen { false }
        from "../fabric/src/main/resources/data"
        into "src/main/resources/data"
    }

    copy {
        outputs.upToDateWhen { false }
        from "../fabric/src/main/resources/yte.mixins.json"
        into "src/main/resources"
    }
}


build {
    doLast {
        buildTools.copyBuildFile()
    }
}

processResources {
    dependsOn setupFiles
}