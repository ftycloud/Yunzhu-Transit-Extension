import org.apache.tools.ant.filters.ReplaceTokens
import org.mtr.mod.BuildTools

plugins {
    id "net.minecraftforge.gradle" version "6.0.36"
    id "org.spongepowered.mixin" version "+"

}

final BuildTools buildTools = new BuildTools(minecraftVersion, "forge", project)

minecraft {
    mappings channel: "official", version: minecraftVersion
    runs {
        configureEach {
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
        }
        client {}
        server { args "--nogui" }
    }
}


sourceSets.main.resources { srcDir "src/generated/resources" }

dependencies {
    minecraft "net.minecraftforge:forge:${minecraftVersion}-${buildTools.getForgeVersion()}"
    annotationProcessor "org.spongepowered:mixin:+:processor"
    annotationProcessor 'systems.manifold:manifold-preprocessor:+'
    implementation fg.deobf("org.mtr:MTR-forge:${mtrVersion}+${minecraftVersion}-server")
    implementation 'com.vdurmont:semver4j:3.1.0'
}

// 添加配置以仅将semver4j依赖打包到最终jar中
jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect {
            // 仅打包semver4j依赖
            if (it.name.contains("semver4j")) {
                it.isDirectory() ? it : zipTree(it)
            }
        }
    }
}

mixin {
    add sourceSets.main, "yte.refmap.json"
    config "yte.mixins.json"
    debug.verbose = true
    debug.export = true
}

java {
    toolchain {
        println("Using Java " + JavaLanguageVersion.of(buildTools.javaLanguageVersion))
        languageVersion.set(JavaLanguageVersion.of(buildTools.javaLanguageVersion))
    }
    withSourcesJar()
    //withJavadocJar()
}



tasks.withType(JavaCompile) {
    def parts = minecraftVersion.tokenize('.')
    def major = parts[0]
    def minor = parts[1].padLeft(2, '0')
    def patch = parts.size() >= 3 ? parts[2].padLeft(2, '0') : '00'
    def mcVersionNumber = "${major}${minor}${patch}"

    println "Passing MC_VERSION=$mcVersionNumber to Manifold"

    options.compilerArgs += [
            "-Xplugin:Manifold",
            "-AMC_VERSION=$mcVersionNumber"
    ]
}



tasks.register("setupFiles") {
    copy {
        outputs.upToDateWhen { false }
        from "src/main/mods.template.toml"
        into "src/main/resources/META-INF"
        filter(ReplaceTokens, tokens: [
                "minecraft": project.findProperty("minecraftVersion") ?: minecraftVersion,
                "version"  : version
        ])
        rename "(.+).template.toml", "\$1.toml"
    }

    delete fileTree("src/main/java/top/xfunny/mod")
    delete fileTree("src/main/java/top/xfunny/mixin")
    delete fileTree("src/main/resources/assets")
    delete fileTree("src/main/resources/data")
    delete fileTree("src/main/resources/yte.mixins.json")

    copy {
        outputs.upToDateWhen { false }
        from "../fabric/src/main/java/top/xfunny/mod"
        into "src/main/java/top/xfunny/mod"
    }

    copy {
        outputs.upToDateWhen { false }
        from "../fabric/src/main/java/top/xfunny/mixin"
        into "src/main/java/top/xfunny/mixin"
    }

    copy {
        outputs.upToDateWhen { false }
        from "../fabric/src/main/resources/assets"
        into "src/main/resources/assets"
    }

    copy {
        outputs.upToDateWhen { false }
        from "../fabric/src/main/resources/data"
        into "src/main/resources/data"
    }

    copy {
        outputs.upToDateWhen { false }
        from "../fabric/src/main/resources/yte.mixins.json"
        into "src/main/resources"
    }
}

build {
    doLast {
        buildTools.copyBuildFile()
    }
}

processResources {
    dependsOn setupFiles
}