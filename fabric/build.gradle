import org.apache.tools.ant.filters.ReplaceTokens
import org.mtr.mod.BuildTools

plugins {
    id "fabric-loom" version "1.10-SNAPSHOT"
}

final BuildTools buildTools = new BuildTools(minecraftVersion, "fabric", project)

loom {
    runConfigs.configureEach { ideConfigGenerated = true }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraftVersion}"
    mappings "net.fabricmc:yarn:${buildTools.getYarnVersion()}:v2"
    modImplementation "net.fabricmc:fabric-loader:${buildTools.getFabricVersion()}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${buildTools.getFabricApiVersion()}"
    modImplementation "org.mtr:MTR-fabric:${mtrVersion}+${minecraftVersion}-server"
    implementation 'com.vdurmont:semver4j:3.1.0'
    modApi("com.terraformersmc:modmenu:${buildTools.getModMenuVersion()}") { exclude group: "net.fabricmc", module: "fabric-loader" }
}

repositories {
    maven { url = "https://maven.terraformersmc.com/" }
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(buildTools.javaLanguageVersion))
    }
    withSourcesJar()
    //withJavadocJar()
}

tasks.register("setupFiles") {
    delete("src/main/resources/fabric.mod.json")
    copy {
        outputs.upToDateWhen { false }
        from "src/main/fabric.mod.template.json"
        into "src/main/resources"
        filter(ReplaceTokens, tokens: [
                "minecraft": project.findProperty("minecraftVersion") ?: minecraftVersion,
                "version"  : version
        ])
        rename "(.+).template.json", "\$1.json"
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}


build {
    doLast {
        buildTools.copyBuildFile()
    }
}




